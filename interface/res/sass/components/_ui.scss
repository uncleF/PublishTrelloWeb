/* Selection */

::selection {
  color: $selection-color;
  background: $selection-background;
}



/* Focus */

%focusStyle {

  &:focus {
    outline: $focus-outlineWidth dotted $focus-outlineColor;
  }

}



/* Fast Touch */

%touchAction {
  touch-action: manipulation;
}



/* Links */

a {
  @extend %focusStyle;
  @extend %touchAction;
  color: $link;
  text-decoration: underline;
  text-decoration-color: rgba($link, $underlineOpacity);
  transition: color $UITransition, text-decoration-color $UITransition;

  &:visited {
    color: $visited;
    text-decoration-color: rgba($visited, $underlineOpacity);
  }

  &:hover {
    color: $hover;
    text-decoration-color: rgba($hover, $underlineOpacity);
  }

  &:active {
    color: $active;
    text-decoration-color: rgba($active, $underlineOpacity);
  }

}



/* Forms */

label {
  @extend %touchAction;
  cursor: pointer;
}

%formBaselineStyle {
  @extend %focusStyle;
  margin: 0;
  font-family: inherit;
}

%formFontStyle {
  font-size: inherit;
}

%formBoxSizingStyle {
  box-sizing: content-box;
}

%formBorderResetStyle {
  border: 0;

  &::-moz-focus-inner {
    padding: 0;
    border: 0;
  }

}

%formTextResetStyle {
  text-transform: none;
}

%formAlignStyle {
  vertical-align: top;
}

%formStyle {
  border: $field-borderWidth solid $field-borderColor;
}

%formRadioCheckboxStyle {
  box-sizing: border-box;
  vertical-align: middle;
}

%formAppearanceResetStyle {
  appearance: none;
}

%formInactiveStyle {
  opacity: .5;
  cursor: default;
  cursor: not-allowed;
}

%formPlaceholderStyle {
  $formPlaceholderStyle-color: $gray;

  &::placeholder {
    color: $formPlaceholderStyle-color;
    opacity: 1;
  }

  &:placeholder-shown {

  }

}

input {
  @extend %formBaselineStyle;
  @extend %formFontStyle;
  @extend %formBoxSizingStyle;
  @extend %formBorderResetStyle;
  @extend %formAlignStyle;
  @extend %formPlaceholderStyle;

  &[type='radio'] {
    @extend %formRadioCheckboxStyle;
  }

  &[type='checkbox'] {
    @extend %formRadioCheckboxStyle;
  }

  &[type='file'] {
    height: auto;
    border: 0;
  }

  &[type='search'] {
    @extend %formAppearanceResetStyle;
  }

  &[type='number'] {
    @extend %formAppearanceResetStyle;

    &::-webkit-inner-spin-button {
      appearance: none;
    }

  }

  &[disabled] {
    @extend %formInactiveStyle;
  }

  &[readonly] {
    @extend %formInactiveStyle;
  }

}

select {
  @extend %formBaselineStyle;
  @extend %formFontStyle;
  @extend %formTextResetStyle;
  @extend %formAlignStyle;
  @extend %formStyle;
  @extend %touchAction;
  @include tx-grid-height(1.5, $lh: false);
  vertical-align: top;

  &[multiple] {
    @include tx-grid-height(5, $lh: false);
  }

}

%buttonStyle {
  @extend %touchAction;
  @include tx-grid-height(1.5, $lh: false);
  padding: 0 ($gap / 2);
  cursor: pointer;
}

button {
  @extend %formBaselineStyle;
  @extend %formFontStyle;
  @extend %formBoxSizingStyle;
  @extend %formBorderResetStyle;
  @extend %formTextResetStyle;
  @extend %buttonStyle;

  &[disabled] {
    @extend %formInactiveStyle;
  }

}

textarea {
  @extend %formBaselineStyle;
  @extend %formBoxSizingStyle;
  @extend %formStyle;
  @extend %formPlaceholderStyle;
  @include tx-form-height(9, 1);
  @include tx-rhythm-padding(.25, .25, $prgt: ($gap / 2), $plft: ($gap / 2));
  display: block;
  overflow: auto;
  font-size: inherit;

  &[disabled] {
    @extend %formInactiveStyle;
  }

  &[readonly] {
    @extend %formInactiveStyle;
  }

}



/* Custom Forms */

.field {
  @extend %formStyle;
  @include tx-form-height(1.5);
  padding: 0 ($gap / 2);
}



/* Buttons */

.button {
  @extend %buttonStyle;
}



/* Form Focus */

%formFocusStyle {
  outline: $focus-outlineWidth dotted $focus-outlineColor;
  outline-offset: 2px;
}



/* Board URL */

.board {
  @extend %formStyle;
  @include tx-form-height(2.10);
  box-sizing: border-box;
  width: 100%;
  padding: 0 50px 0 ($gap / 2);

  &:focus {
    @extend %formFocusStyle;
  }

}



/* Download */

.download {
  $formButtonStyle-color: $white;

  @extend %touchAction;
  @include tx-grid-height(2, $lh: false);
  position: relative;
  display: block;
  overflow: hidden;
  width: 100%;
  padding: 0;
  color: $formButtonStyle-color;
  background: $ui-color;
  border-radius: $ui-borderRadius;
  cursor: pointer;

  &:before {
    @include tx-pseudo(relative, inline-block);
    @include tx-sprite($spt-download, $block: true);
    margin: 0 5px 0 0;
    vertical-align: middle;
  }

  &:hover,
  &:active {
    background: $ui-active;
  }

  &:focus {
    @extend %formFocusStyle;
  }

  &[disabled] {
    background: $ui-disabled;
    opacity: 1;
  }

  &-is-busy {

    &:before {
      position: absolute;
      bottom: 100%;
      left: 50%;
      margin: 0 0 0 ($spt-download-width / -2);
      z-index: 1;
      animation: downloadAnimation 1s infinite;
    }

    &:after {
      @include tx-pseudo;
      top: $ui-borderRadius;
      right: $ui-borderRadius;
      bottom: $ui-borderRadius;
      left: $ui-borderRadius;
      background: $ui-disabled;
    }

  }

}

@keyframes downloadAnimation {

  from {
    transform: translateY(0);
  }

  to {
    transform: translateY(48px + $spt-download-height);
  }

}



/* Options */

.optionCheckbox {
  position: absolute;
  left: -1000px;

  &:checked + .optionLabel {

    &:before {
      background: $ui-color;
    }

    &:after {
      visibility: visible;
    }

    &:hover,
    &:active {

      &:before {
        background: $ui-active;
      }

    }

  }

  &:focus + .optionLabel {
    @extend %formFocusStyle;
  }

}

.optionLabel {
  @include tx-inline-block;
  position: relative;
  color: $ui-color;
  line-height: $optionLabelCheckBackground-size;

  &:before {
    @include tx-pseudo(relative, inline-block);
    width: ($optionLabelCheckBackground-size - $optionLabelCheck-borderWidth * 2);
    height: ($optionLabelCheckBackground-size - $optionLabelCheck-borderWidth * 2);
    border: $optionLabelCheck-borderWidth solid $ui-color;
    border-radius: $ui-borderRadius;
    margin: -4px 5px 0 0;
    vertical-align: middle;
  }

  &:after {
    @include tx-pseudo;
    @include tx-sprite($spt-check, $block: true);
    top: 50%;
    left: ($optionLabelCheckBackground-size - $spt-check-width) / 2;
    margin: ($spt-check-height / -2) 0 0;
    visibility: hidden;
  }

  &:hover,
  &:active {
    color: $ui-active;

    &:before {
      border-color: $ui-active;
    }

  }

}



/* Share */

.shareLink {
  $shareLink-color: $white;

  @include tx-inline-block;
  position: relative;
  text-decoration: none;
  white-space: nowrap;

  &:before {
    @include tx-pseudo(relative, inline-block);
    @include tx-sprite-image($ssh-sprites);
    margin: 0 9px 0 0;
    vertical-align: top;
    opacity: .5;
  }

  &-GH {

    &:before {
      $icon: $spt-github;

      @include tx-sprite-block($icon);
      @include tx-sprite-position($icon);
    }

  }

  &-TW {

    &:before {
      $icon: $spt-twitter;

      @include tx-sprite-block($icon);
      @include tx-sprite-position($icon);
    }

  }

  &-FB {

    &:before {
      $icon: $spt-facebook;

      @include tx-sprite-block($icon);
      @include tx-sprite-position($icon);
    }

  }

  &-GP {

    &:before {
      $icon: $spt-google;

      @include tx-sprite-block($icon);
      @include tx-sprite-position($icon);
    }

  }

  &:visited,
  &:hover,
  &:active {
    color: $shareLink-color;
  }

  &:hover,
  &:active {

    &:before {
      opacity: 1;
    }

    .shareLinkCount {
      opacity: 1;
    }

  }

}

.shareLinkCount {
  $shareLinkCountTail-size: 10px;

  @include tx-inline-block;
  @include tx-font-size(small);
  position: relative;
  color: $ui-color;
  line-height: 1.725;
  opacity: .35;
}



/* Message */

.close {
  $close-position: 5px;

  @include tx-sprite($spt-close, $block: true, $pd: true, $color: $ui-color);
  display: block;
  position: absolute;
  top: $close-position;
  right: $close-position;
  overflow: hidden;

  &:hover,
  &:active {
    background-color: $ui-active;
  }

}

.ok {
  $ok-color: $white;

  @include tx-inline-block;
  @include tx-grid-height(1.5);
  padding: 0 35px;
  color: $ok-color;
  border-radius: $ui-borderRadius;
  background: $ui-color;
  text-decoration: none;

  &:visited,
  &:hover,
  &:active {
    color: $ok-color;
  }

  &:hover,
  &:active {
    background: $ui-active;
  }

}



/* Help */

%navLinkStyle {
  position: relative;
  display: block;
  overflow: hidden;
  height: 0;

  &:before {
    @include tx-pseudo;
    top: 50%;
    left: 50%;
  }

  &:hover,
  &:active {

    &:before {
      background-color: $ui-active;
    }

  }

  &:focus {
    outline-offset: 2px;
  }

}

.helpToggle {
  $help-size: $spt-help-height + 8px;
  $help-borderWidth: 2px;

  @extend %navLinkStyle;
  width: $help-size - $help-borderWidth * 2;
  padding: ($help-size - $help-borderWidth * 2) 0 0;
  border: $help-borderWidth solid $ui-color;
  border-radius: 50%;

  &:before {
    @include tx-sprite($spt-help, $block: true, $color: $ui-color);
    margin: ($spt-help-height /  -2) 0 0 ($spt-help-width / -2);
  }

  &:hover,
  &:active {
    border-color: $ui-active;
  }

}



// /* Settings */

// .settings {
//   $settings-size: $spt-settings-height;

//   @extend %navLinkStyle;
//   width: $settings-size;
//   padding: $settings-size 0 0;

//   &:before {
//     @include tx-sprite($spt-settings, $block: true, $color: $ui-color);
//     margin: ($spt-settings-height /  -2) 0 0 ($spt-settings-width / -2);
//   }

// }



/* Authorization */

.authorization {
  position: relative;
  display: block;
  width: $spt-trello-width;
  height: $spt-trello-height;

  &:before {
    @include tx-pseudo;
    @include tx-sprite($spt-trello, $block: true, $pd: true);
  }

  &:after {
    @include tx-pseudo;
    @include tx-sprite-image($ssh-sprites);
    top: 0;
    right: 0;
  }

  &-is-authorized {

    &:after {
      @include tx-sprite-position($spt-auth);
      width: $spt-auth-width;
      height: $spt-auth-height;
      margin: 12px -7px 0 0;
    }

  }

  &-is-unauthorized {

    &:after {
      @include tx-sprite-position($spt-unauth);
      width: $spt-unauth-width;
      height: $spt-unauth-height;
      margin: 13px -7px 0 0;
    }

  }

  &:focus {
    outline-offset: 2px;
  }

}



/* HDPI UI */

@media only screen and (min-resolution: 1.5dppx), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min--moz-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3 / 2), only screen and (min-device-pixel-ratio: 1.5), only screen and (min-resolution: 150dpi) {

  .download:before,
  .optionLabel:after,
  .shareLink:before,
  .close,
  .help:before {
    @include tx-sprite-dpi($ssh-sprites-2x, $ssh-sprites);
  }

}

@media only screen and (min-resolution: 2.5dppx), only screen and (-webkit-min-device-pixel-ratio: 2.5), only screen and (min--moz-device-pixel-ratio: 2.5), only screen and (-o-min-device-pixel-ratio: 5 / 2), only screen and (min-device-pixel-ratio: 2.5), only screen and (min-resolution: 250dpi) {

  .download:before,
  .optionLabel:after,
  .shareLink:before,
  .close,
  .help:before {
    @include tx-sprite-dpi($ssh-sprites-3x, $ssh-sprites);
  }

}



/* Large Resolution UI */

@media only screen and (min-width: txf-breakpoint(desktopWide)) {}



/* Tablet UI */

@media only screen and (max-width: txf-breakpoint(desktopMin)) {}

@media only screen and (max-width: txf-breakpoint(desktopMin)) and (min-resolution: 1.5dppx), only screen and (max-width: txf-breakpoint(desktopMin)) and (-webkit-min-device-pixel-ratio: 1.5), only screen and (max-width: txf-breakpoint(desktopMin)) and (min--moz-device-pixel-ratio: 1.5), only screen and (max-width: txf-breakpoint(desktopMin)) and (-o-min-device-pixel-ratio: 3 / 2), only screen and (max-width: txf-breakpoint(desktopMin)) and (min-device-pixel-ratio: 1.5), only screen and (max-width: txf-breakpoint(desktopMin)) and (min-resolution: 150dpi) {}



/* Phone UI */

@media handheld, only screen and (max-width: txf-breakpoint(phoneMax)) {

  @import 'phone/_ui-phone';

}

@media only screen and (max-width: txf-breakpoint(phoneMax)) and (min-resolution: 1.5dppx), only screen and (max-width: txf-breakpoint(phoneMax)) and (-webkit-min-device-pixel-ratio: 1.5), only screen and (max-width: txf-breakpoint(phoneMax)) and (min--moz-device-pixel-ratio: 1.5), only screen and (max-width: txf-breakpoint(phoneMax)) and (-o-min-device-pixel-ratio: 3 / 2), only screen and (max-width: txf-breakpoint(phoneMax)) and (min-device-pixel-ratio: 1.5), only screen and (max-width: txf-breakpoint(phoneMax)) and (min-resolution: 150dpi) {}



/* Print Typography */

@media print {

  @import 'print/_ui-print';

}



/* TV UI */

@media projection, tv {}



/* Audio UI */

@media aural {}
